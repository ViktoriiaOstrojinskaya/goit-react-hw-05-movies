{"version":3,"file":"static/js/306.aa7d5a9a.chunk.js","mappings":"gSAEaA,EAAcC,EAAAA,EAAAA,IAAH,+GAOXC,EAAeD,EAAAA,EAAAA,GAAH,oG,SCkBzB,EAvBiB,SAAC,GAAc,IAAZE,EAAW,EAAXA,KAElB,OACE,SAACH,EAAD,UACGG,GACCA,EAAKC,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC3C,OACE,UAACN,EAAD,YACE,gBACEO,IAAKH,EAAY,UARf,mCAQe,OAAgBA,GAAiBI,EAClDC,IAAKJ,EACLK,OAAO,SAGT,kCAAUL,MACV,uCAAeC,OAREH,EAWtB,KAGR,E,UCvBYQ,EAAWZ,EAAAA,EAAAA,GAAH,kE,UC6CrB,EAvCa,WACX,OAAwBa,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAIA,IAAMG,EAAe,mCAAG,2FACtBN,GAAW,GADW,kBAGEO,EAAAA,GAAoBJ,GAHtB,UAIG,KADjBK,EAHc,QAIRC,OAJQ,uBAKlBC,EAAAA,GAAAA,KAAW,4DALO,0BAQpBZ,EAAQU,GARY,kDAUpBN,EAAS,EAAD,IAVY,yBAYpBF,GAAW,GAZS,6EAAH,qDAgBrBM,GAlBC,CAmBF,GAAE,CAACH,KAGF,UAACP,EAAD,YACE,SAAC,EAAD,CAAUV,KAAMA,IACfe,IAAS,uBAAIA,IACbF,IAAW,SAACY,EAAA,EAAD,MAGjB,C,mMC1CYC,EAAM,mCACnBC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiDD,EACjDC,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,GAAD,OAAKF,IAIP,IAAMG,EAAW,mCAAG,+GAEAF,EAAAA,EAAAA,IAAA,sBAFA,uBAEfG,EAFe,EAEfA,KAFe,kBAGhBA,GAHgB,gCAKvBC,QAAQhB,MAAR,MALuB,yDAAH,qDASXiB,EAAe,mCAAG,WAAMf,GAAN,kGAEJU,EAAAA,EAAAA,IAAA,iBAAoBV,IAFhB,uBAEnBa,EAFmB,EAEnBA,KAFmB,kBAGpBA,GAHoB,gCAK3BC,QAAQhB,MAAR,MAL2B,yDAAH,sDASfkB,EAAe,mCAAG,WAAMhB,GAAN,kGAEJU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,aAFI,uBAEnBa,EAFmB,EAEnBA,KAFmB,kBAGpBA,EAAK9B,MAHe,gCAK3B+B,QAAQhB,MAAR,MAL2B,yDAAH,sDASfmB,EAAe,mCAAG,WAAMjB,GAAN,kGAEJU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,aAFI,uBAEnBa,EAFmB,EAEnBA,KAFmB,kBAGpBA,EAAKR,SAHe,gCAK3BS,QAAQhB,MAAR,MAL2B,yDAAH,sDASfoB,EAAY,mCAAG,WAAMC,GAAN,kGAEDT,EAAAA,EAAAA,IAAA,iBAA4B,CACjDU,OAAQ,CACND,MAAAA,EACAE,SAAU,WALU,uBAEhBR,EAFgB,EAEhBA,KAFgB,kBAQjBA,EAAKR,SARY,gCAUxBS,QAAQhB,MAAR,MAVwB,yDAAH,qD","sources":["components/CastCard/CastCard.styled.jsx","components/CastCard/CastCard.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastCardBox = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  gap: 20px;\n`;\n\nexport const CastCardItem = styled.li`\n  width: 200px;\n  height: auto;\n  text-align: center;\n  margin: 0 auto;\n`;\n","import PropTypes from 'prop-types';\nimport defaultActor from '../../images/defaultActor.jpg';\nimport { CastCardBox, CastCardItem } from './CastCard.styled';\n\nconst CastCard = ({ cast }) => {\n  const baseURL = 'https://image.tmdb.org/t/p/w200';\n  return (\n    <CastCardBox>\n      {cast &&\n        cast.map(({ id, profile_path, original_name, character }) => {\n          return (\n            <CastCardItem key={id}>\n              <img\n                src={profile_path ? `${baseURL}${profile_path}` : defaultActor}\n                alt={original_name}\n                height=\"200\"\n              />\n\n              <p>Name: {original_name}</p>\n              <p>Character: {character}</p>\n            </CastCardItem>\n          );\n        })}\n    </CastCardBox>\n  );\n};\n\nexport default CastCard;\n\nCastCard.propTypes = {\n  cast: PropTypes.object.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  margin-top: 30px;\n  list-style: none;\n`;\n","import { toast } from 'react-toastify';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport CastCard from '../CastCard/CastCard';\nimport Loader from '../Loader/Loader';\nimport { CastList } from './Cast.styled';\nimport * as API from '../services/api';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const renderMovieCast = async () => {\n      setLoading(true);\n      try {\n        const results = await API.getMovieCredits(movieId);\n        if (results.length === 0) {\n          toast.warn('Sorry, we don`t have information about cast ðŸ˜“');\n          return;\n        }\n        setCast(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    renderMovieCast();\n  }, [movieId]);\n\n  return (\n    <CastList>\n      <CastCard cast={cast} />\n      {error && <p>{error}</p>}\n      {loading && <Loader />}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","//import { toast } from 'react-toastify';\nimport axios from 'axios';\n\nexport const KEY = '500d9ce9bd19caed28c8e80a6fa70303';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] = KEY;\naxios.defaults.params = {\n  api_key: `${KEY}`,\n};\n//const message = toast.error('Something went wrong. Try again!');\n\nexport const getTrending = async () => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`);\n    return data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`);\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const { data } = await axios.get(`/search/movie/`, {\n      params: {\n        query,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["CastCardBox","styled","CastCardItem","cast","map","id","profile_path","original_name","character","src","defaultActor","alt","height","CastList","useState","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","renderMovieCast","API","results","length","toast","Loader","KEY","axios","api_key","getTrending","data","console","getMovieDetails","getMovieCredits","getMovieReviews","searchMovies","query","params","language"],"sourceRoot":""}