{"version":3,"file":"static/js/857.d578c11c.chunk.js","mappings":"wRAEaA,EAAiBC,EAAAA,EAAAA,IAAH,6CAIdC,EAAkBD,EAAAA,EAAAA,GAAH,kGAQfE,EAAOF,EAAAA,EAAAA,EAAH,+C,SCSjB,EApBoB,SAAC,GAAiB,IAAfG,EAAc,EAAdA,QACrB,OACE,SAACJ,EAAD,UACGI,GACCA,EAAQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzB,OACE,UAACN,EAAD,YACE,UAACC,EAAD,YACE,mCADF,IACkBI,MAElB,0BACE,mCADF,IACkBC,OALEF,EASzB,KAGR,E,oBCnBYG,EAAcR,EAAAA,EAAAA,GAAH,6CC6CxB,EAvCgB,WACd,OAA8BS,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAIA,IAAMG,EAAkB,mCAAG,2FACzBN,GAAW,GADc,kBAGDO,EAAAA,GAAoBJ,GAHnB,UAIA,KADjBK,EAHiB,QAIXC,OAJW,uBAKrBC,EAAAA,GAAAA,KAAW,+DALU,0BAQvBZ,EAAWU,GARY,kDAUvBN,EAAS,EAAD,IAVe,yBAYvBF,GAAW,GAZY,6EAAH,qDAgBxBM,GAlBC,CAmBF,GAAE,CAACH,KAGF,UAACP,EAAD,YACE,SAAC,EAAD,CAAaL,QAASA,IACrBU,IAAS,uBAAIA,IACbF,IAAW,SAACY,EAAA,EAAD,MAGjB,C,mMC1CYC,EAAM,mCACnBC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiDD,EACjDC,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,GAAD,OAAKF,IAIP,IAAMG,EAAW,mCAAG,+GAEAF,EAAAA,EAAAA,IAAA,sBAFA,uBAEfG,EAFe,EAEfA,KAFe,kBAGhBA,GAHgB,gCAKvBC,QAAQhB,MAAR,MALuB,yDAAH,qDASXiB,EAAe,mCAAG,WAAMf,GAAN,kGAEJU,EAAAA,EAAAA,IAAA,iBAAoBV,IAFhB,uBAEnBa,EAFmB,EAEnBA,KAFmB,kBAGpBA,GAHoB,gCAK3BC,QAAQhB,MAAR,MAL2B,yDAAH,sDASfkB,EAAe,mCAAG,WAAMhB,GAAN,kGAEJU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,aAFI,uBAEnBa,EAFmB,EAEnBA,KAFmB,kBAGpBA,EAAKI,MAHe,gCAK3BH,QAAQhB,MAAR,MAL2B,yDAAH,sDASfoB,EAAe,mCAAG,WAAMlB,GAAN,kGAEJU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,aAFI,uBAEnBa,EAFmB,EAEnBA,KAFmB,kBAGpBA,EAAKR,SAHe,gCAK3BS,QAAQhB,MAAR,MAL2B,yDAAH,sDASfqB,EAAY,mCAAG,WAAMC,GAAN,kGAEDV,EAAAA,EAAAA,IAAA,iBAA4B,CACjDW,OAAQ,CACND,MAAAA,EACAE,SAAU,WALU,uBAEhBT,EAFgB,EAEhBA,KAFgB,kBAQjBA,EAAKR,SARY,gCAUxBS,QAAQhB,MAAR,MAVwB,yDAAH,qD","sources":["components/ReviewsCard/ReviewsCard.styled.jsx","components/ReviewsCard/ReviewsCard.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsCardBox = styled.div`\n  margin-top: 20px;\n`;\n\nexport const ReviewsCardItem = styled.li`\n  margin-bottom: 15px;\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Text = styled.p`\n  margin-bottom: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport { ReviewsCardBox, ReviewsCardItem, Text } from './ReviewsCard.styled';\n\nconst ReviewsCard = ({ reviews }) => {\n  return (\n    <ReviewsCardBox>\n      {reviews &&\n        reviews.map(({ id, author, content }) => {\n          return (\n            <ReviewsCardItem key={id}>\n              <Text>\n                <b>Author:</b> {author}\n              </Text>\n              <p>\n                <b>Review:</b> {content}\n              </p>\n            </ReviewsCardItem>\n          );\n        })}\n    </ReviewsCardBox>\n  );\n};\n\nexport default ReviewsCard;\n\nReviewsCard.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  margin-top: 30px;\n`;\n","import { toast } from 'react-toastify';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport ReviewsCard from '../ReviewsCard/ReviewsCard';\nimport Loader from '../Loader/Loader';\nimport * as API from '../services/api';\nimport { ReviewsList } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const renderMovieReviews = async () => {\n      setLoading(true);\n      try {\n        const results = await API.getMovieReviews(movieId);\n        if (results.length === 0) {\n          toast.warn('Sorry, we don`t have reviews of this movie yet ðŸ˜“');\n          return;\n        }\n        setReviews(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    renderMovieReviews();\n  }, [movieId]);\n\n  return (\n    <ReviewsList>\n      <ReviewsCard reviews={reviews} />\n      {error && <p>{error}</p>}\n      {loading && <Loader />}\n    </ReviewsList>\n  );\n};\n\nexport default Reviews;\n","//import { toast } from 'react-toastify';\nimport axios from 'axios';\n\nexport const KEY = '500d9ce9bd19caed28c8e80a6fa70303';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] = KEY;\naxios.defaults.params = {\n  api_key: `${KEY}`,\n};\n//const message = toast.error('Something went wrong. Try again!');\n\nexport const getTrending = async () => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`);\n    return data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`);\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const { data } = await axios.get(`/search/movie/`, {\n      params: {\n        query,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["ReviewsCardBox","styled","ReviewsCardItem","Text","reviews","map","id","author","content","ReviewsList","useState","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","renderMovieReviews","API","results","length","toast","Loader","KEY","axios","api_key","getTrending","data","console","getMovieDetails","getMovieCredits","cast","getMovieReviews","searchMovies","query","params","language"],"sourceRoot":""}