{"version":3,"file":"static/js/213.925a6dde.chunk.js","mappings":"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","sources":["components/services/api.js","components/MovieDescription/MovieDescription.styled.jsx","components/MovieDescription/MovieDescription.jsx","components/ButtonBack/ButtonBack.styled.jsx","components/ButtonBack/ButtonBack.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["//import { toast } from 'react-toastify';\nimport axios from 'axios';\n\nexport const KEY = '500d9ce9bd19caed28c8e80a6fa70303';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] = KEY;\naxios.defaults.params = {\n  api_key: `${KEY}`,\n};\n//const message = toast.error('Something went wrong. Try again!');\n\nexport const getTrending = async () => {\n  try {\n    const { data } = await axios.get(`trending/movie/day`);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`);\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`);\n    return data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`);\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const { data } = await axios.get(`/search/movie/`, {\n      params: {\n        query,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const MovieDescriptionBox = styled.div`\n  display: flex;\n`;\n\nexport const TextBox = styled.div`\n  display: block;\n  padding: 20px;\n`;\n\nexport const TitleMovie = styled.h2`\n  text-align: center;\n  margin-bottom: 30px;\n`;\n\nexport const TitleDescription = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const Text = styled.p`\n  font-style: italic;\n  margin-bottom: 20px;\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport defaultMovie from '../../images/defaultMovie.jpg';\nimport {\n  MovieDescriptionBox,\n  TextBox,\n  TitleMovie,\n  Text,\n  TitleDescription,\n} from './MovieDescription.styled';\n\nconst MovieDescription = ({ movieDetails }) => {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movieDetails;\n  const movieYear = new Date(release_date).getFullYear();\n  const userScore = 100 - Math.round(vote_average);\n  const baseURL = 'https://image.tmdb.org/t/p/w400';\n\n  return (\n    <MovieDescriptionBox>\n      <img\n        src={poster_path ? `${baseURL}${poster_path}` : defaultMovie}\n        alt={title}\n        height=\"350\"\n      />\n      <TextBox>\n        <TitleMovie>\n          {title}({movieYear})\n        </TitleMovie>\n        <Text>User score: {userScore}%</Text>\n        <TitleDescription>Overview</TitleDescription>\n        <Text>{overview}</Text>\n        <TitleDescription>Genres</TitleDescription>\n        <Text>{genres && genres.map(genre => genre.name).join(', ')}</Text>\n      </TextBox>\n    </MovieDescriptionBox>\n  );\n};\n\nexport default MovieDescription;\n\nMovieDescription.propTypes = {\n  movieDetails: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n      genres: PropTypes.object.isRequired,\n    })\n  ).isRequired,\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const StyledLink = styled(NavLink)`\n  display: flex;\n  width: 70px;\n  padding: 5px;\n\n  justify-content: center;\n  border-radius: 4px;\n  text-decoration: none;\n  color: white;\n  background-color: #767573;\n  margin-bottom: 10px;\n\n  &:hover,\n  &:focus {\n    background-color: orange;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLink } from './ButtonBack.styled';\n\nconst ButtonBack = ({ to }) => {\n  return <StyledLink to={to}>Go Back</StyledLink>;\n};\n\nexport default ButtonBack;\n\nButtonBack.propTypes = {\n  to: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const DetailList = styled.ul`\n  margin-top: 30px;\n  border-top: 1px solid black;\n  border-bottom: 1px solid black;\n  padding: 10px;\n`;\n","import { toast } from 'react-toastify';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport MovieDescription from '../../components/MovieDescription/MovieDescription';\nimport Loader from 'components/Loader/Loader';\nimport ButtonBack from 'components/ButtonBack/ButtonBack';\nimport { DetailList } from './MovieDetails.styled';\nimport * as API from '../../components/services/api';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const renderMovieDetail = async () => {\n      setLoading(true);\n      try {\n        const results = await API.getMovieDetails(movieId);\n        if (!results) {\n          toast.error('Sorry, we don`t have information of this movie ðŸ˜“');\n          return;\n        }\n        setMovieDetails(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    renderMovieDetail();\n  }, [movieId]);\n\n  return (\n    <div>\n      <main>\n        {loading && <Loader />}\n        <ButtonBack to={backLinkHref} />\n        {movieDetails && <MovieDescription movieDetails={movieDetails} />}\n      </main>\n      <DetailList>\n        <li>\n          <Link to=\"cast\" state={{ from: backLinkHref }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ from: backLinkHref }}>\n            Review\n          </Link>\n        </li>\n      </DetailList>\n      <Outlet />\n      {error && <p>{error}</p>}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["KEY","axios","api_key","getTrending","data","console","error","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","results","searchMovies","query","params","language","MovieDescriptionBox","styled","TextBox","TitleMovie","TitleDescription","Text","movieDetails","poster_path","title","release_date","vote_average","overview","genres","movieYear","Date","getFullYear","userScore","Math","round","src","defaultMovie","alt","height","map","genre","name","join","StyledLink","NavLink","to","DetailList","useState","setMovieDetails","loading","setLoading","setError","useParams","backLinkHref","useLocation","state","from","useEffect","renderMovieDetail","API","toast","Loader"],"sourceRoot":""}